# Based on http://sabre.io/baikal/install/

# Map to determine if authentication should be bypassed based on client IP
map $remote_addr $bypass_auth {
    default 0;
    # InjectedWhitelistStart
    # These lines will be replaced by the entrypoint script based on BAIKAL_LOCAL_WHITELIST
    # ~^192\.168\.1\. 1;
    # ~^10\. 1;
    # ~^172\.(1[6-9]|2[0-9]|3[01])\. 1;
    # InjectedWhitelistEnd
}

server {
  listen 80;
  listen [::]:80;
  server_name _;

  root   /var/www/baikal/html;
  index index.php;

  rewrite ^/.well-known/caldav /dav.php redirect;
  rewrite ^/.well-known/carddav /dav.php redirect;

  charset utf-8;

  location ~ /(\.ht|Core|Specific) {
    deny all;
    return 404;
  }

  # Special handling for DAV endpoints with whitelist support
  location ~ ^/(dav\.php|cal\.php|card\.php)(.*)$ {
    try_files $fastcgi_script_name =404;
    include        /etc/nginx/fastcgi_params;
    fastcgi_split_path_info  ^(.+\.php)(.*)$;
    fastcgi_pass   unix:/var/run/php-fpm.sock;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    fastcgi_param  PATH_INFO        $fastcgi_path_info;

    # Bypass authentication for whitelisted IPs by setting a custom header
    # This allows Baikal to handle authentication differently for these requests
    if ($bypass_auth = 1) {
        fastcgi_param  HTTP_X_BAIKAL_WHITELIST "1";
    }
  }

  # Pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  location ~ ^(.+\.php)(.*)$ {
    try_files $fastcgi_script_name =404;
    include        /etc/nginx/fastcgi_params;
    fastcgi_split_path_info  ^(.+\.php)(.*)$;
    fastcgi_pass   unix:/var/run/php-fpm.sock;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    fastcgi_param  PATH_INFO        $fastcgi_path_info;
  }

  # Deny access to Apache httpd .htaccess files, see https://github.com/JsBergbau/BaikalAnleitung#webserver-konfiguration
  location ~ /.ht {
    deny all;
  }
}
